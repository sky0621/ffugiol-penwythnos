// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWorkHolderRelations(t *testing.T) {
	t.Parallel()

	query := WorkHolderRelations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWorkHolderRelationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkHolderRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkHolderRelationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := WorkHolderRelations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkHolderRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkHolderRelationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkHolderRelationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkHolderRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkHolderRelationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WorkHolderRelationExists(ctx, tx, o.WorkID, o.WorkHolderID)
	if err != nil {
		t.Errorf("Unable to check if WorkHolderRelation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WorkHolderRelationExists to return true, but got false.")
	}
}

func testWorkHolderRelationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	workHolderRelationFound, err := FindWorkHolderRelation(ctx, tx, o.WorkID, o.WorkHolderID)
	if err != nil {
		t.Error(err)
	}

	if workHolderRelationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWorkHolderRelationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = WorkHolderRelations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWorkHolderRelationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := WorkHolderRelations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWorkHolderRelationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	workHolderRelationOne := &WorkHolderRelation{}
	workHolderRelationTwo := &WorkHolderRelation{}
	if err = randomize.Struct(seed, workHolderRelationOne, workHolderRelationDBTypes, false, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}
	if err = randomize.Struct(seed, workHolderRelationTwo, workHolderRelationDBTypes, false, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workHolderRelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workHolderRelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WorkHolderRelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWorkHolderRelationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	workHolderRelationOne := &WorkHolderRelation{}
	workHolderRelationTwo := &WorkHolderRelation{}
	if err = randomize.Struct(seed, workHolderRelationOne, workHolderRelationDBTypes, false, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}
	if err = randomize.Struct(seed, workHolderRelationTwo, workHolderRelationDBTypes, false, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workHolderRelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workHolderRelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkHolderRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func workHolderRelationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolderRelation) error {
	*o = WorkHolderRelation{}
	return nil
}

func workHolderRelationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolderRelation) error {
	*o = WorkHolderRelation{}
	return nil
}

func workHolderRelationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolderRelation) error {
	*o = WorkHolderRelation{}
	return nil
}

func workHolderRelationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolderRelation) error {
	*o = WorkHolderRelation{}
	return nil
}

func workHolderRelationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolderRelation) error {
	*o = WorkHolderRelation{}
	return nil
}

func workHolderRelationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolderRelation) error {
	*o = WorkHolderRelation{}
	return nil
}

func workHolderRelationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolderRelation) error {
	*o = WorkHolderRelation{}
	return nil
}

func workHolderRelationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolderRelation) error {
	*o = WorkHolderRelation{}
	return nil
}

func workHolderRelationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolderRelation) error {
	*o = WorkHolderRelation{}
	return nil
}

func testWorkHolderRelationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &WorkHolderRelation{}
	o := &WorkHolderRelation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation object: %s", err)
	}

	AddWorkHolderRelationHook(boil.BeforeInsertHook, workHolderRelationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	workHolderRelationBeforeInsertHooks = []WorkHolderRelationHook{}

	AddWorkHolderRelationHook(boil.AfterInsertHook, workHolderRelationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	workHolderRelationAfterInsertHooks = []WorkHolderRelationHook{}

	AddWorkHolderRelationHook(boil.AfterSelectHook, workHolderRelationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	workHolderRelationAfterSelectHooks = []WorkHolderRelationHook{}

	AddWorkHolderRelationHook(boil.BeforeUpdateHook, workHolderRelationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	workHolderRelationBeforeUpdateHooks = []WorkHolderRelationHook{}

	AddWorkHolderRelationHook(boil.AfterUpdateHook, workHolderRelationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	workHolderRelationAfterUpdateHooks = []WorkHolderRelationHook{}

	AddWorkHolderRelationHook(boil.BeforeDeleteHook, workHolderRelationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	workHolderRelationBeforeDeleteHooks = []WorkHolderRelationHook{}

	AddWorkHolderRelationHook(boil.AfterDeleteHook, workHolderRelationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	workHolderRelationAfterDeleteHooks = []WorkHolderRelationHook{}

	AddWorkHolderRelationHook(boil.BeforeUpsertHook, workHolderRelationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	workHolderRelationBeforeUpsertHooks = []WorkHolderRelationHook{}

	AddWorkHolderRelationHook(boil.AfterUpsertHook, workHolderRelationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	workHolderRelationAfterUpsertHooks = []WorkHolderRelationHook{}
}

func testWorkHolderRelationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkHolderRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkHolderRelationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(workHolderRelationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := WorkHolderRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkHolderRelationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkHolderRelationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkHolderRelationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkHolderRelationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WorkHolderRelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	workHolderRelationDBTypes = map[string]string{`WorkID`: `character varying`, `WorkHolderID`: `character varying`, `CreateUser`: `character varying`, `CreatedAt`: `timestamp without time zone`, `UpdateUser`: `character varying`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_                         = bytes.MinRead
)

func testWorkHolderRelationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(workHolderRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(workHolderRelationAllColumns) == len(workHolderRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkHolderRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWorkHolderRelationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(workHolderRelationAllColumns) == len(workHolderRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolderRelation{}
	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkHolderRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workHolderRelationDBTypes, true, workHolderRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(workHolderRelationAllColumns, workHolderRelationPrimaryKeyColumns) {
		fields = workHolderRelationAllColumns
	} else {
		fields = strmangle.SetComplement(
			workHolderRelationAllColumns,
			workHolderRelationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WorkHolderRelationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWorkHolderRelationsUpsert(t *testing.T) {
	t.Parallel()

	if len(workHolderRelationAllColumns) == len(workHolderRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := WorkHolderRelation{}
	if err = randomize.Struct(seed, &o, workHolderRelationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WorkHolderRelation: %s", err)
	}

	count, err := WorkHolderRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, workHolderRelationDBTypes, false, workHolderRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkHolderRelation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WorkHolderRelation: %s", err)
	}

	count, err = WorkHolderRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
