// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// WorkHolder is an object representing the database table.
type WorkHolder struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	FirstName  string      `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName   string      `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	Nickname   null.String `boil:"nickname" json:"nickname,omitempty" toml:"nickname" yaml:"nickname,omitempty"`
	CreateUser null.String `boil:"create_user" json:"create_user,omitempty" toml:"create_user" yaml:"create_user,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdateUser null.String `boil:"update_user" json:"update_user,omitempty" toml:"update_user" yaml:"update_user,omitempty"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt  null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *workHolderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L workHolderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WorkHolderColumns = struct {
	ID         string
	FirstName  string
	LastName   string
	Nickname   string
	CreateUser string
	CreatedAt  string
	UpdateUser string
	UpdatedAt  string
	DeletedAt  string
}{
	ID:         "id",
	FirstName:  "first_name",
	LastName:   "last_name",
	Nickname:   "nickname",
	CreateUser: "create_user",
	CreatedAt:  "created_at",
	UpdateUser: "update_user",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
}

// Generated where

var WorkHolderWhere = struct {
	ID         whereHelperstring
	FirstName  whereHelperstring
	LastName   whereHelperstring
	Nickname   whereHelpernull_String
	CreateUser whereHelpernull_String
	CreatedAt  whereHelpertime_Time
	UpdateUser whereHelpernull_String
	UpdatedAt  whereHelpernull_Time
	DeletedAt  whereHelpernull_Time
}{
	ID:         whereHelperstring{field: "\"work_holder\".\"id\""},
	FirstName:  whereHelperstring{field: "\"work_holder\".\"first_name\""},
	LastName:   whereHelperstring{field: "\"work_holder\".\"last_name\""},
	Nickname:   whereHelpernull_String{field: "\"work_holder\".\"nickname\""},
	CreateUser: whereHelpernull_String{field: "\"work_holder\".\"create_user\""},
	CreatedAt:  whereHelpertime_Time{field: "\"work_holder\".\"created_at\""},
	UpdateUser: whereHelpernull_String{field: "\"work_holder\".\"update_user\""},
	UpdatedAt:  whereHelpernull_Time{field: "\"work_holder\".\"updated_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"work_holder\".\"deleted_at\""},
}

// WorkHolderRels is where relationship names are stored.
var WorkHolderRels = struct {
}{}

// workHolderR is where relationships are stored.
type workHolderR struct {
}

// NewStruct creates a new relationship struct
func (*workHolderR) NewStruct() *workHolderR {
	return &workHolderR{}
}

// workHolderL is where Load methods for each relationship are stored.
type workHolderL struct{}

var (
	workHolderAllColumns            = []string{"id", "first_name", "last_name", "nickname", "create_user", "created_at", "update_user", "updated_at", "deleted_at"}
	workHolderColumnsWithoutDefault = []string{"id", "first_name", "last_name", "updated_at", "deleted_at"}
	workHolderColumnsWithDefault    = []string{"nickname", "create_user", "created_at", "update_user"}
	workHolderPrimaryKeyColumns     = []string{"id"}
)

type (
	// WorkHolderSlice is an alias for a slice of pointers to WorkHolder.
	// This should generally be used opposed to []WorkHolder.
	WorkHolderSlice []*WorkHolder
	// WorkHolderHook is the signature for custom WorkHolder hook methods
	WorkHolderHook func(context.Context, boil.ContextExecutor, *WorkHolder) error

	workHolderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	workHolderType                 = reflect.TypeOf(&WorkHolder{})
	workHolderMapping              = queries.MakeStructMapping(workHolderType)
	workHolderPrimaryKeyMapping, _ = queries.BindMapping(workHolderType, workHolderMapping, workHolderPrimaryKeyColumns)
	workHolderInsertCacheMut       sync.RWMutex
	workHolderInsertCache          = make(map[string]insertCache)
	workHolderUpdateCacheMut       sync.RWMutex
	workHolderUpdateCache          = make(map[string]updateCache)
	workHolderUpsertCacheMut       sync.RWMutex
	workHolderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var workHolderBeforeInsertHooks []WorkHolderHook
var workHolderBeforeUpdateHooks []WorkHolderHook
var workHolderBeforeDeleteHooks []WorkHolderHook
var workHolderBeforeUpsertHooks []WorkHolderHook

var workHolderAfterInsertHooks []WorkHolderHook
var workHolderAfterSelectHooks []WorkHolderHook
var workHolderAfterUpdateHooks []WorkHolderHook
var workHolderAfterDeleteHooks []WorkHolderHook
var workHolderAfterUpsertHooks []WorkHolderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WorkHolder) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workHolderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WorkHolder) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workHolderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WorkHolder) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workHolderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WorkHolder) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workHolderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WorkHolder) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workHolderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WorkHolder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workHolderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WorkHolder) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workHolderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WorkHolder) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workHolderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WorkHolder) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workHolderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWorkHolderHook registers your hook function for all future operations.
func AddWorkHolderHook(hookPoint boil.HookPoint, workHolderHook WorkHolderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		workHolderBeforeInsertHooks = append(workHolderBeforeInsertHooks, workHolderHook)
	case boil.BeforeUpdateHook:
		workHolderBeforeUpdateHooks = append(workHolderBeforeUpdateHooks, workHolderHook)
	case boil.BeforeDeleteHook:
		workHolderBeforeDeleteHooks = append(workHolderBeforeDeleteHooks, workHolderHook)
	case boil.BeforeUpsertHook:
		workHolderBeforeUpsertHooks = append(workHolderBeforeUpsertHooks, workHolderHook)
	case boil.AfterInsertHook:
		workHolderAfterInsertHooks = append(workHolderAfterInsertHooks, workHolderHook)
	case boil.AfterSelectHook:
		workHolderAfterSelectHooks = append(workHolderAfterSelectHooks, workHolderHook)
	case boil.AfterUpdateHook:
		workHolderAfterUpdateHooks = append(workHolderAfterUpdateHooks, workHolderHook)
	case boil.AfterDeleteHook:
		workHolderAfterDeleteHooks = append(workHolderAfterDeleteHooks, workHolderHook)
	case boil.AfterUpsertHook:
		workHolderAfterUpsertHooks = append(workHolderAfterUpsertHooks, workHolderHook)
	}
}

// One returns a single workHolder record from the query.
func (q workHolderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WorkHolder, error) {
	o := &WorkHolder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for work_holder")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WorkHolder records from the query.
func (q workHolderQuery) All(ctx context.Context, exec boil.ContextExecutor) (WorkHolderSlice, error) {
	var o []*WorkHolder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WorkHolder slice")
	}

	if len(workHolderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WorkHolder records in the query.
func (q workHolderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count work_holder rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q workHolderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if work_holder exists")
	}

	return count > 0, nil
}

// WorkHolders retrieves all the records using an executor.
func WorkHolders(mods ...qm.QueryMod) workHolderQuery {
	mods = append(mods, qm.From("\"work_holder\""))
	return workHolderQuery{NewQuery(mods...)}
}

// FindWorkHolder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWorkHolder(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*WorkHolder, error) {
	workHolderObj := &WorkHolder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"work_holder\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, workHolderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from work_holder")
	}

	return workHolderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WorkHolder) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no work_holder provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workHolderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	workHolderInsertCacheMut.RLock()
	cache, cached := workHolderInsertCache[key]
	workHolderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			workHolderAllColumns,
			workHolderColumnsWithDefault,
			workHolderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(workHolderType, workHolderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(workHolderType, workHolderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"work_holder\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"work_holder\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into work_holder")
	}

	if !cached {
		workHolderInsertCacheMut.Lock()
		workHolderInsertCache[key] = cache
		workHolderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WorkHolder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WorkHolder) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	workHolderUpdateCacheMut.RLock()
	cache, cached := workHolderUpdateCache[key]
	workHolderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			workHolderAllColumns,
			workHolderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update work_holder, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"work_holder\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, workHolderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(workHolderType, workHolderMapping, append(wl, workHolderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update work_holder row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for work_holder")
	}

	if !cached {
		workHolderUpdateCacheMut.Lock()
		workHolderUpdateCache[key] = cache
		workHolderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q workHolderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for work_holder")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for work_holder")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WorkHolderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workHolderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"work_holder\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, workHolderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in workHolder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all workHolder")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WorkHolder) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no work_holder provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workHolderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	workHolderUpsertCacheMut.RLock()
	cache, cached := workHolderUpsertCache[key]
	workHolderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			workHolderAllColumns,
			workHolderColumnsWithDefault,
			workHolderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			workHolderAllColumns,
			workHolderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert work_holder, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(workHolderPrimaryKeyColumns))
			copy(conflict, workHolderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"work_holder\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(workHolderType, workHolderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(workHolderType, workHolderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert work_holder")
	}

	if !cached {
		workHolderUpsertCacheMut.Lock()
		workHolderUpsertCache[key] = cache
		workHolderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WorkHolder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WorkHolder) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WorkHolder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), workHolderPrimaryKeyMapping)
	sql := "DELETE FROM \"work_holder\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from work_holder")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for work_holder")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q workHolderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no workHolderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from work_holder")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for work_holder")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WorkHolderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(workHolderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workHolderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"work_holder\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, workHolderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from workHolder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for work_holder")
	}

	if len(workHolderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WorkHolder) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWorkHolder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorkHolderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WorkHolderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workHolderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"work_holder\".* FROM \"work_holder\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, workHolderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WorkHolderSlice")
	}

	*o = slice

	return nil
}

// WorkHolderExists checks if the WorkHolder row exists.
func WorkHolderExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"work_holder\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if work_holder exists")
	}

	return exists, nil
}
