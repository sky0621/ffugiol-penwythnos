// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Organizations", testOrganizations)
	t.Run("Works", testWorks)
	t.Run("WorkHolders", testWorkHolders)
	t.Run("WorkHolderRelations", testWorkHolderRelations)
}

func TestDelete(t *testing.T) {
	t.Run("Organizations", testOrganizationsDelete)
	t.Run("Works", testWorksDelete)
	t.Run("WorkHolders", testWorkHoldersDelete)
	t.Run("WorkHolderRelations", testWorkHolderRelationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Organizations", testOrganizationsQueryDeleteAll)
	t.Run("Works", testWorksQueryDeleteAll)
	t.Run("WorkHolders", testWorkHoldersQueryDeleteAll)
	t.Run("WorkHolderRelations", testWorkHolderRelationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Organizations", testOrganizationsSliceDeleteAll)
	t.Run("Works", testWorksSliceDeleteAll)
	t.Run("WorkHolders", testWorkHoldersSliceDeleteAll)
	t.Run("WorkHolderRelations", testWorkHolderRelationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Organizations", testOrganizationsExists)
	t.Run("Works", testWorksExists)
	t.Run("WorkHolders", testWorkHoldersExists)
	t.Run("WorkHolderRelations", testWorkHolderRelationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Organizations", testOrganizationsFind)
	t.Run("Works", testWorksFind)
	t.Run("WorkHolders", testWorkHoldersFind)
	t.Run("WorkHolderRelations", testWorkHolderRelationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Organizations", testOrganizationsBind)
	t.Run("Works", testWorksBind)
	t.Run("WorkHolders", testWorkHoldersBind)
	t.Run("WorkHolderRelations", testWorkHolderRelationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Organizations", testOrganizationsOne)
	t.Run("Works", testWorksOne)
	t.Run("WorkHolders", testWorkHoldersOne)
	t.Run("WorkHolderRelations", testWorkHolderRelationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Organizations", testOrganizationsAll)
	t.Run("Works", testWorksAll)
	t.Run("WorkHolders", testWorkHoldersAll)
	t.Run("WorkHolderRelations", testWorkHolderRelationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Organizations", testOrganizationsCount)
	t.Run("Works", testWorksCount)
	t.Run("WorkHolders", testWorkHoldersCount)
	t.Run("WorkHolderRelations", testWorkHolderRelationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Organizations", testOrganizationsHooks)
	t.Run("Works", testWorksHooks)
	t.Run("WorkHolders", testWorkHoldersHooks)
	t.Run("WorkHolderRelations", testWorkHolderRelationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Organizations", testOrganizationsInsert)
	t.Run("Organizations", testOrganizationsInsertWhitelist)
	t.Run("Works", testWorksInsert)
	t.Run("Works", testWorksInsertWhitelist)
	t.Run("WorkHolders", testWorkHoldersInsert)
	t.Run("WorkHolders", testWorkHoldersInsertWhitelist)
	t.Run("WorkHolderRelations", testWorkHolderRelationsInsert)
	t.Run("WorkHolderRelations", testWorkHolderRelationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Organizations", testOrganizationsReload)
	t.Run("Works", testWorksReload)
	t.Run("WorkHolders", testWorkHoldersReload)
	t.Run("WorkHolderRelations", testWorkHolderRelationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Organizations", testOrganizationsReloadAll)
	t.Run("Works", testWorksReloadAll)
	t.Run("WorkHolders", testWorkHoldersReloadAll)
	t.Run("WorkHolderRelations", testWorkHolderRelationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Organizations", testOrganizationsSelect)
	t.Run("Works", testWorksSelect)
	t.Run("WorkHolders", testWorkHoldersSelect)
	t.Run("WorkHolderRelations", testWorkHolderRelationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Organizations", testOrganizationsUpdate)
	t.Run("Works", testWorksUpdate)
	t.Run("WorkHolders", testWorkHoldersUpdate)
	t.Run("WorkHolderRelations", testWorkHolderRelationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Organizations", testOrganizationsSliceUpdateAll)
	t.Run("Works", testWorksSliceUpdateAll)
	t.Run("WorkHolders", testWorkHoldersSliceUpdateAll)
	t.Run("WorkHolderRelations", testWorkHolderRelationsSliceUpdateAll)
}
