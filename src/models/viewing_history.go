// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ViewingHistory is an object representing the database table.
type ViewingHistory struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	MovieID   string    `boil:"movie_id" json:"movie_id" toml:"movie_id" yaml:"movie_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *viewingHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L viewingHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ViewingHistoryColumns = struct {
	ID        string
	UserID    string
	MovieID   string
	CreatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	MovieID:   "movie_id",
	CreatedAt: "created_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ViewingHistoryWhere = struct {
	ID        whereHelperstring
	UserID    whereHelperstring
	MovieID   whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"viewing_history\".\"id\""},
	UserID:    whereHelperstring{field: "\"viewing_history\".\"user_id\""},
	MovieID:   whereHelperstring{field: "\"viewing_history\".\"movie_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"viewing_history\".\"created_at\""},
}

// ViewingHistoryRels is where relationship names are stored.
var ViewingHistoryRels = struct {
	Movie string
	User  string
}{
	Movie: "Movie",
	User:  "User",
}

// viewingHistoryR is where relationships are stored.
type viewingHistoryR struct {
	Movie *Movie
	User  *Viewer
}

// NewStruct creates a new relationship struct
func (*viewingHistoryR) NewStruct() *viewingHistoryR {
	return &viewingHistoryR{}
}

// viewingHistoryL is where Load methods for each relationship are stored.
type viewingHistoryL struct{}

var (
	viewingHistoryAllColumns            = []string{"id", "user_id", "movie_id", "created_at"}
	viewingHistoryColumnsWithoutDefault = []string{"id", "user_id", "movie_id"}
	viewingHistoryColumnsWithDefault    = []string{"created_at"}
	viewingHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// ViewingHistorySlice is an alias for a slice of pointers to ViewingHistory.
	// This should generally be used opposed to []ViewingHistory.
	ViewingHistorySlice []*ViewingHistory
	// ViewingHistoryHook is the signature for custom ViewingHistory hook methods
	ViewingHistoryHook func(context.Context, boil.ContextExecutor, *ViewingHistory) error

	viewingHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	viewingHistoryType                 = reflect.TypeOf(&ViewingHistory{})
	viewingHistoryMapping              = queries.MakeStructMapping(viewingHistoryType)
	viewingHistoryPrimaryKeyMapping, _ = queries.BindMapping(viewingHistoryType, viewingHistoryMapping, viewingHistoryPrimaryKeyColumns)
	viewingHistoryInsertCacheMut       sync.RWMutex
	viewingHistoryInsertCache          = make(map[string]insertCache)
	viewingHistoryUpdateCacheMut       sync.RWMutex
	viewingHistoryUpdateCache          = make(map[string]updateCache)
	viewingHistoryUpsertCacheMut       sync.RWMutex
	viewingHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var viewingHistoryBeforeInsertHooks []ViewingHistoryHook
var viewingHistoryBeforeUpdateHooks []ViewingHistoryHook
var viewingHistoryBeforeDeleteHooks []ViewingHistoryHook
var viewingHistoryBeforeUpsertHooks []ViewingHistoryHook

var viewingHistoryAfterInsertHooks []ViewingHistoryHook
var viewingHistoryAfterSelectHooks []ViewingHistoryHook
var viewingHistoryAfterUpdateHooks []ViewingHistoryHook
var viewingHistoryAfterDeleteHooks []ViewingHistoryHook
var viewingHistoryAfterUpsertHooks []ViewingHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ViewingHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewingHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ViewingHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewingHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ViewingHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewingHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ViewingHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewingHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ViewingHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewingHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ViewingHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewingHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ViewingHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewingHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ViewingHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewingHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ViewingHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewingHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddViewingHistoryHook registers your hook function for all future operations.
func AddViewingHistoryHook(hookPoint boil.HookPoint, viewingHistoryHook ViewingHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		viewingHistoryBeforeInsertHooks = append(viewingHistoryBeforeInsertHooks, viewingHistoryHook)
	case boil.BeforeUpdateHook:
		viewingHistoryBeforeUpdateHooks = append(viewingHistoryBeforeUpdateHooks, viewingHistoryHook)
	case boil.BeforeDeleteHook:
		viewingHistoryBeforeDeleteHooks = append(viewingHistoryBeforeDeleteHooks, viewingHistoryHook)
	case boil.BeforeUpsertHook:
		viewingHistoryBeforeUpsertHooks = append(viewingHistoryBeforeUpsertHooks, viewingHistoryHook)
	case boil.AfterInsertHook:
		viewingHistoryAfterInsertHooks = append(viewingHistoryAfterInsertHooks, viewingHistoryHook)
	case boil.AfterSelectHook:
		viewingHistoryAfterSelectHooks = append(viewingHistoryAfterSelectHooks, viewingHistoryHook)
	case boil.AfterUpdateHook:
		viewingHistoryAfterUpdateHooks = append(viewingHistoryAfterUpdateHooks, viewingHistoryHook)
	case boil.AfterDeleteHook:
		viewingHistoryAfterDeleteHooks = append(viewingHistoryAfterDeleteHooks, viewingHistoryHook)
	case boil.AfterUpsertHook:
		viewingHistoryAfterUpsertHooks = append(viewingHistoryAfterUpsertHooks, viewingHistoryHook)
	}
}

// One returns a single viewingHistory record from the query.
func (q viewingHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ViewingHistory, error) {
	o := &ViewingHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for viewing_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ViewingHistory records from the query.
func (q viewingHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ViewingHistorySlice, error) {
	var o []*ViewingHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ViewingHistory slice")
	}

	if len(viewingHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ViewingHistory records in the query.
func (q viewingHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count viewing_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q viewingHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if viewing_history exists")
	}

	return count > 0, nil
}

// Movie pointed to by the foreign key.
func (o *ViewingHistory) Movie(mods ...qm.QueryMod) movieQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MovieID),
	}

	queryMods = append(queryMods, mods...)

	query := Movies(queryMods...)
	queries.SetFrom(query.Query, "\"movie\"")

	return query
}

// User pointed to by the foreign key.
func (o *ViewingHistory) User(mods ...qm.QueryMod) viewerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Viewers(queryMods...)
	queries.SetFrom(query.Query, "\"viewer\"")

	return query
}

// LoadMovie allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (viewingHistoryL) LoadMovie(ctx context.Context, e boil.ContextExecutor, singular bool, maybeViewingHistory interface{}, mods queries.Applicator) error {
	var slice []*ViewingHistory
	var object *ViewingHistory

	if singular {
		object = maybeViewingHistory.(*ViewingHistory)
	} else {
		slice = *maybeViewingHistory.(*[]*ViewingHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &viewingHistoryR{}
		}
		args = append(args, object.MovieID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &viewingHistoryR{}
			}

			for _, a := range args {
				if a == obj.MovieID {
					continue Outer
				}
			}

			args = append(args, obj.MovieID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`movie`), qm.WhereIn(`movie.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Movie")
	}

	var resultSlice []*Movie
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Movie")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for movie")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for movie")
	}

	if len(viewingHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Movie = foreign
		if foreign.R == nil {
			foreign.R = &movieR{}
		}
		foreign.R.ViewingHistories = append(foreign.R.ViewingHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MovieID == foreign.ID {
				local.R.Movie = foreign
				if foreign.R == nil {
					foreign.R = &movieR{}
				}
				foreign.R.ViewingHistories = append(foreign.R.ViewingHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (viewingHistoryL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeViewingHistory interface{}, mods queries.Applicator) error {
	var slice []*ViewingHistory
	var object *ViewingHistory

	if singular {
		object = maybeViewingHistory.(*ViewingHistory)
	} else {
		slice = *maybeViewingHistory.(*[]*ViewingHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &viewingHistoryR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &viewingHistoryR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`viewer`), qm.WhereIn(`viewer.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Viewer")
	}

	var resultSlice []*Viewer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Viewer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for viewer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for viewer")
	}

	if len(viewingHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &viewerR{}
		}
		foreign.R.UserViewingHistories = append(foreign.R.UserViewingHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &viewerR{}
				}
				foreign.R.UserViewingHistories = append(foreign.R.UserViewingHistories, local)
				break
			}
		}
	}

	return nil
}

// SetMovie of the viewingHistory to the related item.
// Sets o.R.Movie to related.
// Adds o to related.R.ViewingHistories.
func (o *ViewingHistory) SetMovie(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Movie) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"viewing_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"movie_id"}),
		strmangle.WhereClause("\"", "\"", 2, viewingHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MovieID = related.ID
	if o.R == nil {
		o.R = &viewingHistoryR{
			Movie: related,
		}
	} else {
		o.R.Movie = related
	}

	if related.R == nil {
		related.R = &movieR{
			ViewingHistories: ViewingHistorySlice{o},
		}
	} else {
		related.R.ViewingHistories = append(related.R.ViewingHistories, o)
	}

	return nil
}

// SetUser of the viewingHistory to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserViewingHistories.
func (o *ViewingHistory) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Viewer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"viewing_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, viewingHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &viewingHistoryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &viewerR{
			UserViewingHistories: ViewingHistorySlice{o},
		}
	} else {
		related.R.UserViewingHistories = append(related.R.UserViewingHistories, o)
	}

	return nil
}

// ViewingHistories retrieves all the records using an executor.
func ViewingHistories(mods ...qm.QueryMod) viewingHistoryQuery {
	mods = append(mods, qm.From("\"viewing_history\""))
	return viewingHistoryQuery{NewQuery(mods...)}
}

// FindViewingHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindViewingHistory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ViewingHistory, error) {
	viewingHistoryObj := &ViewingHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"viewing_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, viewingHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from viewing_history")
	}

	return viewingHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ViewingHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no viewing_history provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(viewingHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	viewingHistoryInsertCacheMut.RLock()
	cache, cached := viewingHistoryInsertCache[key]
	viewingHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			viewingHistoryAllColumns,
			viewingHistoryColumnsWithDefault,
			viewingHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(viewingHistoryType, viewingHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(viewingHistoryType, viewingHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"viewing_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"viewing_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into viewing_history")
	}

	if !cached {
		viewingHistoryInsertCacheMut.Lock()
		viewingHistoryInsertCache[key] = cache
		viewingHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ViewingHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ViewingHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	viewingHistoryUpdateCacheMut.RLock()
	cache, cached := viewingHistoryUpdateCache[key]
	viewingHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			viewingHistoryAllColumns,
			viewingHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update viewing_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"viewing_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, viewingHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(viewingHistoryType, viewingHistoryMapping, append(wl, viewingHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update viewing_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for viewing_history")
	}

	if !cached {
		viewingHistoryUpdateCacheMut.Lock()
		viewingHistoryUpdateCache[key] = cache
		viewingHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q viewingHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for viewing_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for viewing_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ViewingHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewingHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"viewing_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, viewingHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in viewingHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all viewingHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ViewingHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no viewing_history provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(viewingHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	viewingHistoryUpsertCacheMut.RLock()
	cache, cached := viewingHistoryUpsertCache[key]
	viewingHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			viewingHistoryAllColumns,
			viewingHistoryColumnsWithDefault,
			viewingHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			viewingHistoryAllColumns,
			viewingHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert viewing_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(viewingHistoryPrimaryKeyColumns))
			copy(conflict, viewingHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"viewing_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(viewingHistoryType, viewingHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(viewingHistoryType, viewingHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert viewing_history")
	}

	if !cached {
		viewingHistoryUpsertCacheMut.Lock()
		viewingHistoryUpsertCache[key] = cache
		viewingHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ViewingHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ViewingHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ViewingHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), viewingHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"viewing_history\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from viewing_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for viewing_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q viewingHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no viewingHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from viewing_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for viewing_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ViewingHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(viewingHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewingHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"viewing_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, viewingHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from viewingHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for viewing_history")
	}

	if len(viewingHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ViewingHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindViewingHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ViewingHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ViewingHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewingHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"viewing_history\".* FROM \"viewing_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, viewingHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ViewingHistorySlice")
	}

	*o = slice

	return nil
}

// ViewingHistoryExists checks if the ViewingHistory row exists.
func ViewingHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"viewing_history\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if viewing_history exists")
	}

	return exists, nil
}
