// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWorkHolders(t *testing.T) {
	t.Parallel()

	query := WorkHolders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWorkHoldersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkHolders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkHoldersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := WorkHolders().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkHolders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkHoldersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkHolderSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkHolders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkHoldersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WorkHolderExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if WorkHolder exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WorkHolderExists to return true, but got false.")
	}
}

func testWorkHoldersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	workHolderFound, err := FindWorkHolder(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if workHolderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWorkHoldersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = WorkHolders().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWorkHoldersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := WorkHolders().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWorkHoldersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	workHolderOne := &WorkHolder{}
	workHolderTwo := &WorkHolder{}
	if err = randomize.Struct(seed, workHolderOne, workHolderDBTypes, false, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}
	if err = randomize.Struct(seed, workHolderTwo, workHolderDBTypes, false, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workHolderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workHolderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WorkHolders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWorkHoldersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	workHolderOne := &WorkHolder{}
	workHolderTwo := &WorkHolder{}
	if err = randomize.Struct(seed, workHolderOne, workHolderDBTypes, false, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}
	if err = randomize.Struct(seed, workHolderTwo, workHolderDBTypes, false, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workHolderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workHolderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkHolders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func workHolderBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolder) error {
	*o = WorkHolder{}
	return nil
}

func workHolderAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolder) error {
	*o = WorkHolder{}
	return nil
}

func workHolderAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolder) error {
	*o = WorkHolder{}
	return nil
}

func workHolderBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolder) error {
	*o = WorkHolder{}
	return nil
}

func workHolderAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolder) error {
	*o = WorkHolder{}
	return nil
}

func workHolderBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolder) error {
	*o = WorkHolder{}
	return nil
}

func workHolderAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolder) error {
	*o = WorkHolder{}
	return nil
}

func workHolderBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolder) error {
	*o = WorkHolder{}
	return nil
}

func workHolderAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkHolder) error {
	*o = WorkHolder{}
	return nil
}

func testWorkHoldersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &WorkHolder{}
	o := &WorkHolder{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, workHolderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WorkHolder object: %s", err)
	}

	AddWorkHolderHook(boil.BeforeInsertHook, workHolderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	workHolderBeforeInsertHooks = []WorkHolderHook{}

	AddWorkHolderHook(boil.AfterInsertHook, workHolderAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	workHolderAfterInsertHooks = []WorkHolderHook{}

	AddWorkHolderHook(boil.AfterSelectHook, workHolderAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	workHolderAfterSelectHooks = []WorkHolderHook{}

	AddWorkHolderHook(boil.BeforeUpdateHook, workHolderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	workHolderBeforeUpdateHooks = []WorkHolderHook{}

	AddWorkHolderHook(boil.AfterUpdateHook, workHolderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	workHolderAfterUpdateHooks = []WorkHolderHook{}

	AddWorkHolderHook(boil.BeforeDeleteHook, workHolderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	workHolderBeforeDeleteHooks = []WorkHolderHook{}

	AddWorkHolderHook(boil.AfterDeleteHook, workHolderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	workHolderAfterDeleteHooks = []WorkHolderHook{}

	AddWorkHolderHook(boil.BeforeUpsertHook, workHolderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	workHolderBeforeUpsertHooks = []WorkHolderHook{}

	AddWorkHolderHook(boil.AfterUpsertHook, workHolderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	workHolderAfterUpsertHooks = []WorkHolderHook{}
}

func testWorkHoldersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkHolders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkHoldersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(workHolderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := WorkHolders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkHoldersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkHoldersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkHolderSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkHoldersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WorkHolders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	workHolderDBTypes = map[string]string{`ID`: `character varying`, `FirstName`: `character varying`, `LastName`: `character varying`, `Nickname`: `character varying`, `CreateUser`: `character varying`, `CreatedAt`: `timestamp without time zone`, `UpdateUser`: `character varying`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_                 = bytes.MinRead
)

func testWorkHoldersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(workHolderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(workHolderAllColumns) == len(workHolderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkHolders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWorkHoldersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(workHolderAllColumns) == len(workHolderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WorkHolder{}
	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkHolders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workHolderDBTypes, true, workHolderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(workHolderAllColumns, workHolderPrimaryKeyColumns) {
		fields = workHolderAllColumns
	} else {
		fields = strmangle.SetComplement(
			workHolderAllColumns,
			workHolderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WorkHolderSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWorkHoldersUpsert(t *testing.T) {
	t.Parallel()

	if len(workHolderAllColumns) == len(workHolderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := WorkHolder{}
	if err = randomize.Struct(seed, &o, workHolderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WorkHolder: %s", err)
	}

	count, err := WorkHolders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, workHolderDBTypes, false, workHolderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkHolder struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WorkHolder: %s", err)
	}

	count, err = WorkHolders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
