// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testViewers(t *testing.T) {
	t.Parallel()

	query := Viewers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testViewersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Viewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testViewersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Viewers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Viewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testViewersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ViewerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Viewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testViewersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ViewerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Viewer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ViewerExists to return true, but got false.")
	}
}

func testViewersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	viewerFound, err := FindViewer(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if viewerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testViewersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Viewers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testViewersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Viewers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testViewersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	viewerOne := &Viewer{}
	viewerTwo := &Viewer{}
	if err = randomize.Struct(seed, viewerOne, viewerDBTypes, false, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}
	if err = randomize.Struct(seed, viewerTwo, viewerDBTypes, false, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = viewerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = viewerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Viewers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testViewersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	viewerOne := &Viewer{}
	viewerTwo := &Viewer{}
	if err = randomize.Struct(seed, viewerOne, viewerDBTypes, false, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}
	if err = randomize.Struct(seed, viewerTwo, viewerDBTypes, false, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = viewerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = viewerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Viewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func viewerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Viewer) error {
	*o = Viewer{}
	return nil
}

func viewerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Viewer) error {
	*o = Viewer{}
	return nil
}

func viewerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Viewer) error {
	*o = Viewer{}
	return nil
}

func viewerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Viewer) error {
	*o = Viewer{}
	return nil
}

func viewerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Viewer) error {
	*o = Viewer{}
	return nil
}

func viewerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Viewer) error {
	*o = Viewer{}
	return nil
}

func viewerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Viewer) error {
	*o = Viewer{}
	return nil
}

func viewerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Viewer) error {
	*o = Viewer{}
	return nil
}

func viewerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Viewer) error {
	*o = Viewer{}
	return nil
}

func testViewersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Viewer{}
	o := &Viewer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, viewerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Viewer object: %s", err)
	}

	AddViewerHook(boil.BeforeInsertHook, viewerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	viewerBeforeInsertHooks = []ViewerHook{}

	AddViewerHook(boil.AfterInsertHook, viewerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	viewerAfterInsertHooks = []ViewerHook{}

	AddViewerHook(boil.AfterSelectHook, viewerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	viewerAfterSelectHooks = []ViewerHook{}

	AddViewerHook(boil.BeforeUpdateHook, viewerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	viewerBeforeUpdateHooks = []ViewerHook{}

	AddViewerHook(boil.AfterUpdateHook, viewerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	viewerAfterUpdateHooks = []ViewerHook{}

	AddViewerHook(boil.BeforeDeleteHook, viewerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	viewerBeforeDeleteHooks = []ViewerHook{}

	AddViewerHook(boil.AfterDeleteHook, viewerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	viewerAfterDeleteHooks = []ViewerHook{}

	AddViewerHook(boil.BeforeUpsertHook, viewerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	viewerBeforeUpsertHooks = []ViewerHook{}

	AddViewerHook(boil.AfterUpsertHook, viewerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	viewerAfterUpsertHooks = []ViewerHook{}
}

func testViewersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Viewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testViewersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(viewerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Viewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testViewersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testViewersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ViewerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testViewersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Viewers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	viewerDBTypes = map[string]string{`ID`: `character varying`, `Name`: `character varying`, `Nickname`: `character varying`}
	_             = bytes.MinRead
)

func testViewersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(viewerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(viewerAllColumns) == len(viewerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Viewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testViewersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(viewerAllColumns) == len(viewerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Viewer{}
	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Viewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, viewerDBTypes, true, viewerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(viewerAllColumns, viewerPrimaryKeyColumns) {
		fields = viewerAllColumns
	} else {
		fields = strmangle.SetComplement(
			viewerAllColumns,
			viewerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ViewerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testViewersUpsert(t *testing.T) {
	t.Parallel()

	if len(viewerAllColumns) == len(viewerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Viewer{}
	if err = randomize.Struct(seed, &o, viewerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Viewer: %s", err)
	}

	count, err := Viewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, viewerDBTypes, false, viewerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Viewer: %s", err)
	}

	count, err = Viewers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
