// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testViewingHistories(t *testing.T) {
	t.Parallel()

	query := ViewingHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testViewingHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ViewingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testViewingHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ViewingHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ViewingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testViewingHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ViewingHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ViewingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testViewingHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ViewingHistoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ViewingHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ViewingHistoryExists to return true, but got false.")
	}
}

func testViewingHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	viewingHistoryFound, err := FindViewingHistory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if viewingHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testViewingHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ViewingHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testViewingHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ViewingHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testViewingHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	viewingHistoryOne := &ViewingHistory{}
	viewingHistoryTwo := &ViewingHistory{}
	if err = randomize.Struct(seed, viewingHistoryOne, viewingHistoryDBTypes, false, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, viewingHistoryTwo, viewingHistoryDBTypes, false, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = viewingHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = viewingHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ViewingHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testViewingHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	viewingHistoryOne := &ViewingHistory{}
	viewingHistoryTwo := &ViewingHistory{}
	if err = randomize.Struct(seed, viewingHistoryOne, viewingHistoryDBTypes, false, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, viewingHistoryTwo, viewingHistoryDBTypes, false, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = viewingHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = viewingHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ViewingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func viewingHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ViewingHistory) error {
	*o = ViewingHistory{}
	return nil
}

func viewingHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ViewingHistory) error {
	*o = ViewingHistory{}
	return nil
}

func viewingHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ViewingHistory) error {
	*o = ViewingHistory{}
	return nil
}

func viewingHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ViewingHistory) error {
	*o = ViewingHistory{}
	return nil
}

func viewingHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ViewingHistory) error {
	*o = ViewingHistory{}
	return nil
}

func viewingHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ViewingHistory) error {
	*o = ViewingHistory{}
	return nil
}

func viewingHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ViewingHistory) error {
	*o = ViewingHistory{}
	return nil
}

func viewingHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ViewingHistory) error {
	*o = ViewingHistory{}
	return nil
}

func viewingHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ViewingHistory) error {
	*o = ViewingHistory{}
	return nil
}

func testViewingHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ViewingHistory{}
	o := &ViewingHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ViewingHistory object: %s", err)
	}

	AddViewingHistoryHook(boil.BeforeInsertHook, viewingHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	viewingHistoryBeforeInsertHooks = []ViewingHistoryHook{}

	AddViewingHistoryHook(boil.AfterInsertHook, viewingHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	viewingHistoryAfterInsertHooks = []ViewingHistoryHook{}

	AddViewingHistoryHook(boil.AfterSelectHook, viewingHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	viewingHistoryAfterSelectHooks = []ViewingHistoryHook{}

	AddViewingHistoryHook(boil.BeforeUpdateHook, viewingHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	viewingHistoryBeforeUpdateHooks = []ViewingHistoryHook{}

	AddViewingHistoryHook(boil.AfterUpdateHook, viewingHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	viewingHistoryAfterUpdateHooks = []ViewingHistoryHook{}

	AddViewingHistoryHook(boil.BeforeDeleteHook, viewingHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	viewingHistoryBeforeDeleteHooks = []ViewingHistoryHook{}

	AddViewingHistoryHook(boil.AfterDeleteHook, viewingHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	viewingHistoryAfterDeleteHooks = []ViewingHistoryHook{}

	AddViewingHistoryHook(boil.BeforeUpsertHook, viewingHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	viewingHistoryBeforeUpsertHooks = []ViewingHistoryHook{}

	AddViewingHistoryHook(boil.AfterUpsertHook, viewingHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	viewingHistoryAfterUpsertHooks = []ViewingHistoryHook{}
}

func testViewingHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ViewingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testViewingHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(viewingHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ViewingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testViewingHistoryToOneMovieUsingMovie(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ViewingHistory
	var foreign Movie

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, viewingHistoryDBTypes, false, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, movieDBTypes, false, movieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Movie struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MovieID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Movie().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ViewingHistorySlice{&local}
	if err = local.L.LoadMovie(ctx, tx, false, (*[]*ViewingHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Movie == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Movie = nil
	if err = local.L.LoadMovie(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Movie == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testViewingHistoryToOneViewerUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ViewingHistory
	var foreign Viewer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, viewingHistoryDBTypes, false, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, viewerDBTypes, false, viewerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Viewer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ViewingHistorySlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*ViewingHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testViewingHistoryToOneSetOpMovieUsingMovie(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ViewingHistory
	var b, c Movie

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, viewingHistoryDBTypes, false, strmangle.SetComplement(viewingHistoryPrimaryKeyColumns, viewingHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, movieDBTypes, false, strmangle.SetComplement(moviePrimaryKeyColumns, movieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Movie{&b, &c} {
		err = a.SetMovie(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Movie != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ViewingHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MovieID != x.ID {
			t.Error("foreign key was wrong value", a.MovieID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MovieID))
		reflect.Indirect(reflect.ValueOf(&a.MovieID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MovieID != x.ID {
			t.Error("foreign key was wrong value", a.MovieID, x.ID)
		}
	}
}
func testViewingHistoryToOneSetOpViewerUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ViewingHistory
	var b, c Viewer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, viewingHistoryDBTypes, false, strmangle.SetComplement(viewingHistoryPrimaryKeyColumns, viewingHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, viewerDBTypes, false, strmangle.SetComplement(viewerPrimaryKeyColumns, viewerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, viewerDBTypes, false, strmangle.SetComplement(viewerPrimaryKeyColumns, viewerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Viewer{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserViewingHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testViewingHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testViewingHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ViewingHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testViewingHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ViewingHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	viewingHistoryDBTypes = map[string]string{`ID`: `character varying`, `UserID`: `character varying`, `MovieID`: `character varying`, `CreatedAt`: `timestamp without time zone`}
	_                     = bytes.MinRead
)

func testViewingHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(viewingHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(viewingHistoryAllColumns) == len(viewingHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ViewingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testViewingHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(viewingHistoryAllColumns) == len(viewingHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ViewingHistory{}
	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ViewingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, viewingHistoryDBTypes, true, viewingHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(viewingHistoryAllColumns, viewingHistoryPrimaryKeyColumns) {
		fields = viewingHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			viewingHistoryAllColumns,
			viewingHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ViewingHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testViewingHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(viewingHistoryAllColumns) == len(viewingHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ViewingHistory{}
	if err = randomize.Struct(seed, &o, viewingHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ViewingHistory: %s", err)
	}

	count, err := ViewingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, viewingHistoryDBTypes, false, viewingHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ViewingHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ViewingHistory: %s", err)
	}

	count, err = ViewingHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
